package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// EmailLink represents a row from 'public.email_links'.
type EmailLink struct {
	ID          Xid       `json:"id" db:"id" form:"id"`                                  // id
	EmailSendID Xid       `json:"email_send_id" db:"email_send_id" form:"email_send_id"` // email_send_id
	OriginalURL string    `json:"original_url" db:"original_url" form:"original_url"`    // original_url
	TrackedURL  string    `json:"tracked_url" db:"tracked_url" form:"tracked_url"`       // tracked_url
	CreatedAt   time.Time `json:"created_at" db:"created_at" form:"created_at"`          // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [EmailLink] exists in the database.
func (el *EmailLink) Exists() bool {
	return el._exists
}

// Deleted returns true when the [EmailLink] has been marked for deletion
// from the database.
func (el *EmailLink) Deleted() bool {
	return el._deleted
}

// Insert inserts the [EmailLink] to the database.
func (el *EmailLink) Insert(ctx context.Context, db DB) error {
	switch {
	case el._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case el._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.email_links (` +
		`id, email_send_id, original_url, tracked_url, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, el.ID, el.EmailSendID, el.OriginalURL, el.TrackedURL, el.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, el.ID, el.EmailSendID, el.OriginalURL, el.TrackedURL, el.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	el._exists = true
	return nil
}

// Update updates a [EmailLink] in the database.
func (el *EmailLink) Update(ctx context.Context, db DB) error {
	switch {
	case !el._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case el._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.email_links SET ` +
		`email_send_id = $1, original_url = $2, tracked_url = $3, created_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, el.EmailSendID, el.OriginalURL, el.TrackedURL, el.CreatedAt, el.ID)
	if _, err := db.ExecContext(ctx, sqlstr, el.EmailSendID, el.OriginalURL, el.TrackedURL, el.CreatedAt, el.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [EmailLink] to the database.
func (el *EmailLink) Save(ctx context.Context, db DB) error {
	if el.Exists() {
		return el.Update(ctx, db)
	}
	return el.Insert(ctx, db)
}

// Upsert performs an upsert for [EmailLink].
func (el *EmailLink) Upsert(ctx context.Context, db DB) error {
	switch {
	case el._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.email_links (` +
		`id, email_send_id, original_url, tracked_url, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`email_send_id = EXCLUDED.email_send_id, original_url = EXCLUDED.original_url, tracked_url = EXCLUDED.tracked_url, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, el.ID, el.EmailSendID, el.OriginalURL, el.TrackedURL, el.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, el.ID, el.EmailSendID, el.OriginalURL, el.TrackedURL, el.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	el._exists = true
	return nil
}

// Delete deletes the [EmailLink] from the database.
func (el *EmailLink) Delete(ctx context.Context, db DB) error {
	switch {
	case !el._exists: // doesn't exist
		return nil
	case el._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.email_links ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, el.ID)
	if _, err := db.ExecContext(ctx, sqlstr, el.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	el._deleted = true
	return nil
}

// EmailLinkByID retrieves a row from 'public.email_links' as a [EmailLink].
//
// Generated from index 'email_links_pkey'.
func EmailLinkByID(ctx context.Context, db DB, id Xid) (*EmailLink, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, email_send_id, original_url, tracked_url, created_at ` +
		`FROM public.email_links ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	el := EmailLink{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&el.ID, &el.EmailSendID, &el.OriginalURL, &el.TrackedURL, &el.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &el, nil
}

// EmailSendByEmailSendID returns the EmailSend associated with the [EmailLink]'s (EmailSendID).
//
// Generated from foreign key 'email_links_email_send_id_fkey'.
func (el *EmailLink) EmailSendByEmailSendID(ctx context.Context, db DB) (*EmailSend, error) {
	return EmailSendByID(ctx, db, el.EmailSendID)
}
