package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// PaymentMethod represents a row from 'public.payment_methods'.
type PaymentMethod struct {
	ID        int64        `json:"id" db:"id" form:"id"`                         // id
	PublicID  NullPublicID `json:"public_id" db:"public_id" form:"public_id"`    // public_id
	UserID    int64        `json:"user_id" db:"user_id" form:"user_id"`          // user_id
	Type      string       `json:"type" db:"type" form:"type"`                   // type
	Details   string       `json:"details" db:"details" form:"details"`          // details
	IsPrimary bool         `json:"is_primary" db:"is_primary" form:"is_primary"` // is_primary
	CreatedAt time.Time    `json:"created_at" db:"created_at" form:"created_at"` // created_at
	UpdatedAt time.Time    `json:"updated_at" db:"updated_at" form:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PaymentMethod] exists in the database.
func (pm *PaymentMethod) Exists() bool {
	return pm._exists
}

// Deleted returns true when the [PaymentMethod] has been marked for deletion
// from the database.
func (pm *PaymentMethod) Deleted() bool {
	return pm._deleted
}

// Insert inserts the [PaymentMethod] to the database.
func (pm *PaymentMethod) Insert(ctx context.Context, db DB) error {
	switch {
	case pm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.payment_methods (` +
		`public_id, user_id, type, details, is_primary, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`
	// run
	logf(sqlstr, pm.PublicID, pm.UserID, pm.Type, pm.Details, pm.IsPrimary, pm.CreatedAt, pm.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, pm.PublicID, pm.UserID, pm.Type, pm.Details, pm.IsPrimary, pm.CreatedAt, pm.UpdatedAt).Scan(&pm.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pm._exists = true
	return nil
}

// Update updates a [PaymentMethod] in the database.
func (pm *PaymentMethod) Update(ctx context.Context, db DB) error {
	switch {
	case !pm._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pm._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.payment_methods SET ` +
		`public_id = $1, user_id = $2, type = $3, details = $4, is_primary = $5, created_at = $6, updated_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, pm.PublicID, pm.UserID, pm.Type, pm.Details, pm.IsPrimary, pm.CreatedAt, pm.UpdatedAt, pm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pm.PublicID, pm.UserID, pm.Type, pm.Details, pm.IsPrimary, pm.CreatedAt, pm.UpdatedAt, pm.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [PaymentMethod] to the database.
func (pm *PaymentMethod) Save(ctx context.Context, db DB) error {
	if pm.Exists() {
		return pm.Update(ctx, db)
	}
	return pm.Insert(ctx, db)
}

// Upsert performs an upsert for [PaymentMethod].
func (pm *PaymentMethod) Upsert(ctx context.Context, db DB) error {
	switch {
	case pm._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.payment_methods (` +
		`id, public_id, user_id, type, details, is_primary, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, user_id = EXCLUDED.user_id, type = EXCLUDED.type, details = EXCLUDED.details, is_primary = EXCLUDED.is_primary, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, pm.ID, pm.PublicID, pm.UserID, pm.Type, pm.Details, pm.IsPrimary, pm.CreatedAt, pm.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, pm.ID, pm.PublicID, pm.UserID, pm.Type, pm.Details, pm.IsPrimary, pm.CreatedAt, pm.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	pm._exists = true
	return nil
}

// Delete deletes the [PaymentMethod] from the database.
func (pm *PaymentMethod) Delete(ctx context.Context, db DB) error {
	switch {
	case !pm._exists: // doesn't exist
		return nil
	case pm._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.payment_methods ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, pm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pm.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pm._deleted = true
	return nil
}

// PaymentMethodsByUserID retrieves a row from 'public.payment_methods' as a [PaymentMethod].
//
// Generated from index 'idx_payment_methods_user_id'.
func PaymentMethodsByUserID(ctx context.Context, db DB, userID int64) ([]*PaymentMethod, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, type, details, is_primary, created_at, updated_at ` +
		`FROM public.payment_methods ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*PaymentMethod
	for rows.Next() {
		pm := PaymentMethod{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pm.ID, &pm.PublicID, &pm.UserID, &pm.Type, &pm.Details, &pm.IsPrimary, &pm.CreatedAt, &pm.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pm)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PaymentMethodByID retrieves a row from 'public.payment_methods' as a [PaymentMethod].
//
// Generated from index 'payment_methods_pkey'.
func PaymentMethodByID(ctx context.Context, db DB, id int64) (*PaymentMethod, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, type, details, is_primary, created_at, updated_at ` +
		`FROM public.payment_methods ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	pm := PaymentMethod{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pm.ID, &pm.PublicID, &pm.UserID, &pm.Type, &pm.Details, &pm.IsPrimary, &pm.CreatedAt, &pm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &pm, nil
}

// PaymentMethodByPublicID retrieves a row from 'public.payment_methods' as a [PaymentMethod].
//
// Generated from index 'payment_methods_public_id_key'.
func PaymentMethodByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*PaymentMethod, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, type, details, is_primary, created_at, updated_at ` +
		`FROM public.payment_methods ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	pm := PaymentMethod{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&pm.ID, &pm.PublicID, &pm.UserID, &pm.Type, &pm.Details, &pm.IsPrimary, &pm.CreatedAt, &pm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &pm, nil
}

// UserByUserID returns the User associated with the [PaymentMethod]'s (UserID).
//
// Generated from foreign key 'payment_methods_user_id_fkey'.
func (pm *PaymentMethod) UserByUserID(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, pm.UserID)
}
