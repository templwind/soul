package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// EmailClick represents a row from 'public.email_clicks'.
type EmailClick struct {
	ID          int64          `json:"id" db:"id" form:"id"`                                  // id
	EmailLinkID Xid            `json:"email_link_id" db:"email_link_id" form:"email_link_id"` // email_link_id
	ClickedAt   time.Time      `json:"clicked_at" db:"clicked_at" form:"clicked_at"`          // clicked_at
	IPAddress   sql.NullString `json:"ip_address" db:"ip_address" form:"ip_address"`          // ip_address
	UserAgent   sql.NullString `json:"user_agent" db:"user_agent" form:"user_agent"`          // user_agent
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [EmailClick] exists in the database.
func (ec *EmailClick) Exists() bool {
	return ec._exists
}

// Deleted returns true when the [EmailClick] has been marked for deletion
// from the database.
func (ec *EmailClick) Deleted() bool {
	return ec._deleted
}

// Insert inserts the [EmailClick] to the database.
func (ec *EmailClick) Insert(ctx context.Context, db DB) error {
	switch {
	case ec._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ec._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.email_clicks (` +
		`email_link_id, clicked_at, ip_address, user_agent` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, ec.EmailLinkID, ec.ClickedAt, ec.IPAddress, ec.UserAgent)
	if err := db.QueryRowContext(ctx, sqlstr, ec.EmailLinkID, ec.ClickedAt, ec.IPAddress, ec.UserAgent).Scan(&ec.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ec._exists = true
	return nil
}

// Update updates a [EmailClick] in the database.
func (ec *EmailClick) Update(ctx context.Context, db DB) error {
	switch {
	case !ec._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ec._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.email_clicks SET ` +
		`email_link_id = $1, clicked_at = $2, ip_address = $3, user_agent = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, ec.EmailLinkID, ec.ClickedAt, ec.IPAddress, ec.UserAgent, ec.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ec.EmailLinkID, ec.ClickedAt, ec.IPAddress, ec.UserAgent, ec.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [EmailClick] to the database.
func (ec *EmailClick) Save(ctx context.Context, db DB) error {
	if ec.Exists() {
		return ec.Update(ctx, db)
	}
	return ec.Insert(ctx, db)
}

// Upsert performs an upsert for [EmailClick].
func (ec *EmailClick) Upsert(ctx context.Context, db DB) error {
	switch {
	case ec._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.email_clicks (` +
		`id, email_link_id, clicked_at, ip_address, user_agent` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`email_link_id = EXCLUDED.email_link_id, clicked_at = EXCLUDED.clicked_at, ip_address = EXCLUDED.ip_address, user_agent = EXCLUDED.user_agent `
	// run
	logf(sqlstr, ec.ID, ec.EmailLinkID, ec.ClickedAt, ec.IPAddress, ec.UserAgent)
	if _, err := db.ExecContext(ctx, sqlstr, ec.ID, ec.EmailLinkID, ec.ClickedAt, ec.IPAddress, ec.UserAgent); err != nil {
		return logerror(err)
	}
	// set exists
	ec._exists = true
	return nil
}

// Delete deletes the [EmailClick] from the database.
func (ec *EmailClick) Delete(ctx context.Context, db DB) error {
	switch {
	case !ec._exists: // doesn't exist
		return nil
	case ec._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.email_clicks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ec.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ec.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ec._deleted = true
	return nil
}

// EmailClickByID retrieves a row from 'public.email_clicks' as a [EmailClick].
//
// Generated from index 'email_clicks_pkey'.
func EmailClickByID(ctx context.Context, db DB, id int64) (*EmailClick, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, email_link_id, clicked_at, ip_address, user_agent ` +
		`FROM public.email_clicks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ec := EmailClick{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ec.ID, &ec.EmailLinkID, &ec.ClickedAt, &ec.IPAddress, &ec.UserAgent); err != nil {
		return nil, logerror(err)
	}
	return &ec, nil
}

// EmailLinkByEmailLinkID returns the EmailLink associated with the [EmailClick]'s (EmailLinkID).
//
// Generated from foreign key 'email_clicks_email_link_id_fkey'.
func (ec *EmailClick) EmailLinkByEmailLinkID(ctx context.Context, db DB) (*EmailLink, error) {
	return EmailLinkByID(ctx, db, ec.EmailLinkID)
}
