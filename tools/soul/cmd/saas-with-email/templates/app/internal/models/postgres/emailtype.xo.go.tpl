package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// EmailType represents a row from 'public.email_types'.
type EmailType struct {
	ID   int64  `json:"id" db:"id" form:"id"`       // id
	Name string `json:"name" db:"name" form:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [EmailType] exists in the database.
func (et *EmailType) Exists() bool {
	return et._exists
}

// Deleted returns true when the [EmailType] has been marked for deletion
// from the database.
func (et *EmailType) Deleted() bool {
	return et._deleted
}

// Insert inserts the [EmailType] to the database.
func (et *EmailType) Insert(ctx context.Context, db DB) error {
	switch {
	case et._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case et._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.email_types (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, et.Name)
	if err := db.QueryRowContext(ctx, sqlstr, et.Name).Scan(&et.ID); err != nil {
		return logerror(err)
	}
	// set exists
	et._exists = true
	return nil
}

// Update updates a [EmailType] in the database.
func (et *EmailType) Update(ctx context.Context, db DB) error {
	switch {
	case !et._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case et._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.email_types SET ` +
		`name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, et.Name, et.ID)
	if _, err := db.ExecContext(ctx, sqlstr, et.Name, et.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [EmailType] to the database.
func (et *EmailType) Save(ctx context.Context, db DB) error {
	if et.Exists() {
		return et.Update(ctx, db)
	}
	return et.Insert(ctx, db)
}

// Upsert performs an upsert for [EmailType].
func (et *EmailType) Upsert(ctx context.Context, db DB) error {
	switch {
	case et._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.email_types (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, et.ID, et.Name)
	if _, err := db.ExecContext(ctx, sqlstr, et.ID, et.Name); err != nil {
		return logerror(err)
	}
	// set exists
	et._exists = true
	return nil
}

// Delete deletes the [EmailType] from the database.
func (et *EmailType) Delete(ctx context.Context, db DB) error {
	switch {
	case !et._exists: // doesn't exist
		return nil
	case et._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.email_types ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, et.ID)
	if _, err := db.ExecContext(ctx, sqlstr, et.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	et._deleted = true
	return nil
}

// EmailTypeByName retrieves a row from 'public.email_types' as a [EmailType].
//
// Generated from index 'email_types_name_key'.
func EmailTypeByName(ctx context.Context, db DB, name string) (*EmailType, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.email_types ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	et := EmailType{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&et.ID, &et.Name); err != nil {
		return nil, logerror(err)
	}
	return &et, nil
}

// EmailTypeByID retrieves a row from 'public.email_types' as a [EmailType].
//
// Generated from index 'email_types_pkey'.
func EmailTypeByID(ctx context.Context, db DB, id int64) (*EmailType, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.email_types ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	et := EmailType{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&et.ID, &et.Name); err != nil {
		return nil, logerror(err)
	}
	return &et, nil
}
