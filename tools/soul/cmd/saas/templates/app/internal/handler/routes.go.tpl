// Code generated by soul. DO NOT EDIT.
package handler

import (
	{{.imports}}
)

{{- if.jwtEnabled}}
type jwtCustomClaims struct {
	Name  string `json:"name"`
	Admin bool   `json:"admin"`
	jwt.RegisteredClaims
}
{{- end}}

func RegisterHandlers(server *echo.Echo, svcCtx *svc.ServiceContext) {
	{{- if .error404Override }}
	// Create the static handler first
	// staticHandler := customStatic("{{.staticDir}}")
	// fallbackHandler := func(c echo.Context) error {
	// 	return staticHandler(func(c echo.Context) error { return nil })(c)
	// }
	{{- end }}

	{{.routesAdditions}}

	{{- if not .isService }}
	{{- if .error404Override }}

	////////////////////////////////////////////////////////////
	// Catchall handler for static website
	////////////////////////////////////////////////////////////
	{{ .error404Override }}
	{{- else }}
	
	////////////////////////////////////////////////////////////
	// 404 / Catchall handler
	////////////////////////////////////////////////////////////
	server.Any("/*", notfound.NotFoundHandler(svcCtx))
	{{- end}}
	{{- end}}
}

{{- if not .isService }}
{{- if .error404Override }}

// func customStatic(root string) echo.MiddlewareFunc {
//     absRoot, _ := filepath.Abs(root)
    
//     return func(next echo.HandlerFunc) echo.HandlerFunc {
//         return func(c echo.Context) error {
//             path := c.Request().URL.Path
//             cleanPath := strings.TrimPrefix(path, "/")
            
//             // 1. Try $uri/index.html first (but keep the clean URL)
//             indexPath := filepath.Join(absRoot, cleanPath, "index.html")
//             if info, err := os.Stat(indexPath); err == nil && !info.IsDir() {
//                 return c.File(indexPath)
//             }
            
//             // 2. Try $uri.html
//             htmlPath := filepath.Join(absRoot, cleanPath+".html")
//             if info, err := os.Stat(htmlPath); err == nil && !info.IsDir() {
//                 return c.File(htmlPath)
//             }
            
//             // 3. Try $uri (exact match)
//             exactPath := filepath.Join(absRoot, cleanPath)
//             if info, err := os.Stat(exactPath); err == nil && !info.IsDir() {
//                 return c.File(exactPath)
//             }
            
//             // 4. Try SvelteKit's 200.html fallback
//             if _, err := os.Stat(filepath.Join(absRoot, "200.html")); err == nil {
//                 return c.File(filepath.Join(absRoot, "200.html"))
//             }
            
//             // 5. SPA fallback: Serve root index.html
//             if _, err := os.Stat(filepath.Join(absRoot, "index.html")); err == nil {
//                 return c.File(filepath.Join(absRoot, "index.html"))
//             }

//             // 6. If nothing matches, continue to next handler
//             return next(c)
//         }
//     }
// }
{{- end}}
{{- end}}