package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// EmailOpen represents a row from 'public.email_opens'.
type EmailOpen struct {
	ID          int64          `json:"id" db:"id" form:"id"`                                  // id
	EmailSendID Xid            `json:"email_send_id" db:"email_send_id" form:"email_send_id"` // email_send_id
	OpenedAt    time.Time      `json:"opened_at" db:"opened_at" form:"opened_at"`             // opened_at
	IPAddress   sql.NullString `json:"ip_address" db:"ip_address" form:"ip_address"`          // ip_address
	UserAgent   sql.NullString `json:"user_agent" db:"user_agent" form:"user_agent"`          // user_agent
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [EmailOpen] exists in the database.
func (eo *EmailOpen) Exists() bool {
	return eo._exists
}

// Deleted returns true when the [EmailOpen] has been marked for deletion
// from the database.
func (eo *EmailOpen) Deleted() bool {
	return eo._deleted
}

// Insert inserts the [EmailOpen] to the database.
func (eo *EmailOpen) Insert(ctx context.Context, db DB) error {
	switch {
	case eo._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case eo._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.email_opens (` +
		`email_send_id, opened_at, ip_address, user_agent` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, eo.EmailSendID, eo.OpenedAt, eo.IPAddress, eo.UserAgent)
	if err := db.QueryRowContext(ctx, sqlstr, eo.EmailSendID, eo.OpenedAt, eo.IPAddress, eo.UserAgent).Scan(&eo.ID); err != nil {
		return logerror(err)
	}
	// set exists
	eo._exists = true
	return nil
}

// Update updates a [EmailOpen] in the database.
func (eo *EmailOpen) Update(ctx context.Context, db DB) error {
	switch {
	case !eo._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case eo._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.email_opens SET ` +
		`email_send_id = $1, opened_at = $2, ip_address = $3, user_agent = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, eo.EmailSendID, eo.OpenedAt, eo.IPAddress, eo.UserAgent, eo.ID)
	if _, err := db.ExecContext(ctx, sqlstr, eo.EmailSendID, eo.OpenedAt, eo.IPAddress, eo.UserAgent, eo.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [EmailOpen] to the database.
func (eo *EmailOpen) Save(ctx context.Context, db DB) error {
	if eo.Exists() {
		return eo.Update(ctx, db)
	}
	return eo.Insert(ctx, db)
}

// Upsert performs an upsert for [EmailOpen].
func (eo *EmailOpen) Upsert(ctx context.Context, db DB) error {
	switch {
	case eo._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.email_opens (` +
		`id, email_send_id, opened_at, ip_address, user_agent` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`email_send_id = EXCLUDED.email_send_id, opened_at = EXCLUDED.opened_at, ip_address = EXCLUDED.ip_address, user_agent = EXCLUDED.user_agent `
	// run
	logf(sqlstr, eo.ID, eo.EmailSendID, eo.OpenedAt, eo.IPAddress, eo.UserAgent)
	if _, err := db.ExecContext(ctx, sqlstr, eo.ID, eo.EmailSendID, eo.OpenedAt, eo.IPAddress, eo.UserAgent); err != nil {
		return logerror(err)
	}
	// set exists
	eo._exists = true
	return nil
}

// Delete deletes the [EmailOpen] from the database.
func (eo *EmailOpen) Delete(ctx context.Context, db DB) error {
	switch {
	case !eo._exists: // doesn't exist
		return nil
	case eo._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.email_opens ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, eo.ID)
	if _, err := db.ExecContext(ctx, sqlstr, eo.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	eo._deleted = true
	return nil
}

// EmailOpenByID retrieves a row from 'public.email_opens' as a [EmailOpen].
//
// Generated from index 'email_opens_pkey'.
func EmailOpenByID(ctx context.Context, db DB, id int64) (*EmailOpen, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, email_send_id, opened_at, ip_address, user_agent ` +
		`FROM public.email_opens ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	eo := EmailOpen{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&eo.ID, &eo.EmailSendID, &eo.OpenedAt, &eo.IPAddress, &eo.UserAgent); err != nil {
		return nil, logerror(err)
	}
	return &eo, nil
}

// EmailSendByEmailSendID returns the EmailSend associated with the [EmailOpen]'s (EmailSendID).
//
// Generated from foreign key 'email_opens_email_send_id_fkey'.
func (eo *EmailOpen) EmailSendByEmailSendID(ctx context.Context, db DB) (*EmailSend, error) {
	return EmailSendByID(ctx, db, eo.EmailSendID)
}
