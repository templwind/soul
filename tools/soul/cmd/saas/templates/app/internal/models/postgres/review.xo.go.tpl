package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Review represents a row from 'public.reviews'.
type Review struct {
	ID        int64          `json:"id" db:"id" form:"id"`                         // id
	PublicID  NullPublicID   `json:"public_id" db:"public_id" form:"public_id"`    // public_id
	ProductID int64          `json:"product_id" db:"product_id" form:"product_id"` // product_id
	UserID    int64          `json:"user_id" db:"user_id" form:"user_id"`          // user_id
	Rating    int            `json:"rating" db:"rating" form:"rating"`             // rating
	Content   sql.NullString `json:"content" db:"content" form:"content"`          // content
	CreatedAt time.Time      `json:"created_at" db:"created_at" form:"created_at"` // created_at
	UpdatedAt time.Time      `json:"updated_at" db:"updated_at" form:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Review] exists in the database.
func (r *Review) Exists() bool {
	return r._exists
}

// Deleted returns true when the [Review] has been marked for deletion
// from the database.
func (r *Review) Deleted() bool {
	return r._deleted
}

// Insert inserts the [Review] to the database.
func (r *Review) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.reviews (` +
		`public_id, product_id, user_id, rating, content, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`
	// run
	logf(sqlstr, r.PublicID, r.ProductID, r.UserID, r.Rating, r.Content, r.CreatedAt, r.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, r.PublicID, r.ProductID, r.UserID, r.Rating, r.Content, r.CreatedAt, r.UpdatedAt).Scan(&r.ID); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Update updates a [Review] in the database.
func (r *Review) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.reviews SET ` +
		`public_id = $1, product_id = $2, user_id = $3, rating = $4, content = $5, created_at = $6, updated_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, r.PublicID, r.ProductID, r.UserID, r.Rating, r.Content, r.CreatedAt, r.UpdatedAt, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.PublicID, r.ProductID, r.UserID, r.Rating, r.Content, r.CreatedAt, r.UpdatedAt, r.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Review] to the database.
func (r *Review) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for [Review].
func (r *Review) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.reviews (` +
		`id, public_id, product_id, user_id, rating, content, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, product_id = EXCLUDED.product_id, user_id = EXCLUDED.user_id, rating = EXCLUDED.rating, content = EXCLUDED.content, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, r.ID, r.PublicID, r.ProductID, r.UserID, r.Rating, r.Content, r.CreatedAt, r.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID, r.PublicID, r.ProductID, r.UserID, r.Rating, r.Content, r.CreatedAt, r.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the [Review] from the database.
func (r *Review) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.reviews ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// ReviewsByProductID retrieves a row from 'public.reviews' as a [Review].
//
// Generated from index 'idx_reviews_product_id'.
func ReviewsByProductID(ctx context.Context, db DB, productID int64) ([]*Review, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, product_id, user_id, rating, content, created_at, updated_at ` +
		`FROM public.reviews ` +
		`WHERE product_id = $1`
	// run
	logf(sqlstr, productID)
	rows, err := db.QueryContext(ctx, sqlstr, productID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Review
	for rows.Next() {
		r := Review{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&r.ID, &r.PublicID, &r.ProductID, &r.UserID, &r.Rating, &r.Content, &r.CreatedAt, &r.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ReviewsByUserID retrieves a row from 'public.reviews' as a [Review].
//
// Generated from index 'idx_reviews_user_id'.
func ReviewsByUserID(ctx context.Context, db DB, userID int64) ([]*Review, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, product_id, user_id, rating, content, created_at, updated_at ` +
		`FROM public.reviews ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Review
	for rows.Next() {
		r := Review{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&r.ID, &r.PublicID, &r.ProductID, &r.UserID, &r.Rating, &r.Content, &r.CreatedAt, &r.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ReviewByID retrieves a row from 'public.reviews' as a [Review].
//
// Generated from index 'reviews_pkey'.
func ReviewByID(ctx context.Context, db DB, id int64) (*Review, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, product_id, user_id, rating, content, created_at, updated_at ` +
		`FROM public.reviews ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	r := Review{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&r.ID, &r.PublicID, &r.ProductID, &r.UserID, &r.Rating, &r.Content, &r.CreatedAt, &r.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// ReviewByPublicID retrieves a row from 'public.reviews' as a [Review].
//
// Generated from index 'reviews_public_id_key'.
func ReviewByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*Review, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, product_id, user_id, rating, content, created_at, updated_at ` +
		`FROM public.reviews ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	r := Review{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&r.ID, &r.PublicID, &r.ProductID, &r.UserID, &r.Rating, &r.Content, &r.CreatedAt, &r.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// ProductByProductID returns the Product associated with the [Review]'s (ProductID).
//
// Generated from foreign key 'reviews_product_id_fkey'.
func (r *Review) ProductByProductID(ctx context.Context, db DB) (*Product, error) {
	return ProductByID(ctx, db, r.ProductID)
}

// UserByUserID returns the User associated with the [Review]'s (UserID).
//
// Generated from foreign key 'reviews_user_id_fkey'.
func (r *Review) UserByUserID(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, r.UserID)
}
