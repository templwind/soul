package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Tag represents a row from 'public.tags'.
type Tag struct {
	ID        int64         `json:"id" db:"id" form:"id"`                         // id
	PublicID  NullPublicID  `json:"public_id" db:"public_id" form:"public_id"`    // public_id
	Tag       string        `json:"tag" db:"tag" form:"tag"`                      // tag
	PostID    sql.NullInt64 `json:"post_id" db:"post_id" form:"post_id"`          // post_id
	CreatedAt time.Time     `json:"created_at" db:"created_at" form:"created_at"` // created_at
	UpdatedAt time.Time     `json:"updated_at" db:"updated_at" form:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Tag] exists in the database.
func (t *Tag) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Tag] has been marked for deletion
// from the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Tag] to the database.
func (t *Tag) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.tags (` +
		`public_id, tag, post_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, t.PublicID, t.Tag, t.PostID, t.CreatedAt, t.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, t.PublicID, t.Tag, t.PostID, t.CreatedAt, t.UpdatedAt).Scan(&t.ID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Tag] in the database.
func (t *Tag) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tags SET ` +
		`public_id = $1, tag = $2, post_id = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, t.PublicID, t.Tag, t.PostID, t.CreatedAt, t.UpdatedAt, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.PublicID, t.Tag, t.PostID, t.CreatedAt, t.UpdatedAt, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Tag] to the database.
func (t *Tag) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Tag].
func (t *Tag) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tags (` +
		`id, public_id, tag, post_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, tag = EXCLUDED.tag, post_id = EXCLUDED.post_id, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, t.ID, t.PublicID, t.Tag, t.PostID, t.CreatedAt, t.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.PublicID, t.Tag, t.PostID, t.CreatedAt, t.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Tag] from the database.
func (t *Tag) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tags ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TagsByPostID retrieves a row from 'public.tags' as a [Tag].
//
// Generated from index 'idx_tags_post_id'.
func TagsByPostID(ctx context.Context, db DB, postID sql.NullInt64) ([]*Tag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, tag, post_id, created_at, updated_at ` +
		`FROM public.tags ` +
		`WHERE post_id = $1`
	// run
	logf(sqlstr, postID)
	rows, err := db.QueryContext(ctx, sqlstr, postID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Tag
	for rows.Next() {
		t := Tag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&t.ID, &t.PublicID, &t.Tag, &t.PostID, &t.CreatedAt, &t.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TagByID retrieves a row from 'public.tags' as a [Tag].
//
// Generated from index 'tags_pkey'.
func TagByID(ctx context.Context, db DB, id int64) (*Tag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, tag, post_id, created_at, updated_at ` +
		`FROM public.tags ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Tag{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.PublicID, &t.Tag, &t.PostID, &t.CreatedAt, &t.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// TagByPublicID retrieves a row from 'public.tags' as a [Tag].
//
// Generated from index 'tags_public_id_key'.
func TagByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*Tag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, tag, post_id, created_at, updated_at ` +
		`FROM public.tags ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	t := Tag{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&t.ID, &t.PublicID, &t.Tag, &t.PostID, &t.CreatedAt, &t.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// PostByPostID returns the Post associated with the [Tag]'s (PostID).
//
// Generated from foreign key 'tags_post_id_fkey'.
func (t *Tag) PostByPostID(ctx context.Context, db DB) (*Post, error) {
	return PostByID(ctx, db, t.PostID.Int64)
}
