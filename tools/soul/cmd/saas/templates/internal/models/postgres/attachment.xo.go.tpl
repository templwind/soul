package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Attachment represents a row from 'public.attachments'.
type Attachment struct {
	ID        int64        `json:"id" db:"id" form:"id"`                         // id
	PublicID  NullPublicID `json:"public_id" db:"public_id" form:"public_id"`    // public_id
	UserID    int64        `json:"user_id" db:"user_id" form:"user_id"`          // user_id
	FileName  string       `json:"file_name" db:"file_name" form:"file_name"`    // file_name
	FileURL   string       `json:"file_url" db:"file_url" form:"file_url"`       // file_url
	FileSize  int          `json:"file_size" db:"file_size" form:"file_size"`    // file_size
	CreatedAt time.Time    `json:"created_at" db:"created_at" form:"created_at"` // created_at
	UpdatedAt time.Time    `json:"updated_at" db:"updated_at" form:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Attachment] exists in the database.
func (a *Attachment) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Attachment] has been marked for deletion
// from the database.
func (a *Attachment) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Attachment] to the database.
func (a *Attachment) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.attachments (` +
		`public_id, user_id, file_name, file_url, file_size, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`
	// run
	logf(sqlstr, a.PublicID, a.UserID, a.FileName, a.FileURL, a.FileSize, a.CreatedAt, a.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, a.PublicID, a.UserID, a.FileName, a.FileURL, a.FileSize, a.CreatedAt, a.UpdatedAt).Scan(&a.ID); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Attachment] in the database.
func (a *Attachment) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.attachments SET ` +
		`public_id = $1, user_id = $2, file_name = $3, file_url = $4, file_size = $5, created_at = $6, updated_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, a.PublicID, a.UserID, a.FileName, a.FileURL, a.FileSize, a.CreatedAt, a.UpdatedAt, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.PublicID, a.UserID, a.FileName, a.FileURL, a.FileSize, a.CreatedAt, a.UpdatedAt, a.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Attachment] to the database.
func (a *Attachment) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Attachment].
func (a *Attachment) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.attachments (` +
		`id, public_id, user_id, file_name, file_url, file_size, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, user_id = EXCLUDED.user_id, file_name = EXCLUDED.file_name, file_url = EXCLUDED.file_url, file_size = EXCLUDED.file_size, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, a.ID, a.PublicID, a.UserID, a.FileName, a.FileURL, a.FileSize, a.CreatedAt, a.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID, a.PublicID, a.UserID, a.FileName, a.FileURL, a.FileSize, a.CreatedAt, a.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Attachment] from the database.
func (a *Attachment) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.attachments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AttachmentByID retrieves a row from 'public.attachments' as a [Attachment].
//
// Generated from index 'attachments_pkey'.
func AttachmentByID(ctx context.Context, db DB, id int64) (*Attachment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, file_name, file_url, file_size, created_at, updated_at ` +
		`FROM public.attachments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	a := Attachment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&a.ID, &a.PublicID, &a.UserID, &a.FileName, &a.FileURL, &a.FileSize, &a.CreatedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AttachmentByPublicID retrieves a row from 'public.attachments' as a [Attachment].
//
// Generated from index 'attachments_public_id_key'.
func AttachmentByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*Attachment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, file_name, file_url, file_size, created_at, updated_at ` +
		`FROM public.attachments ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	a := Attachment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&a.ID, &a.PublicID, &a.UserID, &a.FileName, &a.FileURL, &a.FileSize, &a.CreatedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AttachmentsByUserID retrieves a row from 'public.attachments' as a [Attachment].
//
// Generated from index 'idx_attachments_user_id'.
func AttachmentsByUserID(ctx context.Context, db DB, userID int64) ([]*Attachment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, file_name, file_url, file_size, created_at, updated_at ` +
		`FROM public.attachments ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Attachment
	for rows.Next() {
		a := Attachment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&a.ID, &a.PublicID, &a.UserID, &a.FileName, &a.FileURL, &a.FileSize, &a.CreatedAt, &a.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &a)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserByUserID returns the User associated with the [Attachment]'s (UserID).
//
// Generated from foreign key 'attachments_user_id_fkey'.
func (a *Attachment) UserByUserID(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, a.UserID)
}
