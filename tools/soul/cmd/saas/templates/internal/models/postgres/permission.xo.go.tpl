package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Permission represents a row from 'public.permissions'.
type Permission struct {
	ID          int64        `json:"id" db:"id" form:"id"`                            // id
	PublicID    NullPublicID `json:"public_id" db:"public_id" form:"public_id"`       // public_id
	Name        string       `json:"name" db:"name" form:"name"`                      // name
	Description string       `json:"description" db:"description" form:"description"` // description
	CreatedAt   time.Time    `json:"created_at" db:"created_at" form:"created_at"`    // created_at
	UpdatedAt   time.Time    `json:"updated_at" db:"updated_at" form:"updated_at"`    // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Permission] exists in the database.
func (p *Permission) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Permission] has been marked for deletion
// from the database.
func (p *Permission) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Permission] to the database.
func (p *Permission) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.permissions (` +
		`public_id, name, description, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.PublicID, p.Name, p.Description, p.CreatedAt, p.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, p.PublicID, p.Name, p.Description, p.CreatedAt, p.UpdatedAt).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Permission] in the database.
func (p *Permission) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.permissions SET ` +
		`public_id = $1, name = $2, description = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, p.PublicID, p.Name, p.Description, p.CreatedAt, p.UpdatedAt, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.PublicID, p.Name, p.Description, p.CreatedAt, p.UpdatedAt, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Permission] to the database.
func (p *Permission) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Permission].
func (p *Permission) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.permissions (` +
		`id, public_id, name, description, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, name = EXCLUDED.name, description = EXCLUDED.description, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, p.ID, p.PublicID, p.Name, p.Description, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.PublicID, p.Name, p.Description, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Permission] from the database.
func (p *Permission) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.permissions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PermissionByID retrieves a row from 'public.permissions' as a [Permission].
//
// Generated from index 'permissions_pkey'.
func PermissionByID(ctx context.Context, db DB, id int64) (*Permission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, name, description, created_at, updated_at ` +
		`FROM public.permissions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Permission{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.PublicID, &p.Name, &p.Description, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// PermissionByPublicID retrieves a row from 'public.permissions' as a [Permission].
//
// Generated from index 'permissions_public_id_key'.
func PermissionByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*Permission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, name, description, created_at, updated_at ` +
		`FROM public.permissions ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	p := Permission{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&p.ID, &p.PublicID, &p.Name, &p.Description, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
