package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// AuditLog represents a row from 'public.audit_logs'.
type AuditLog struct {
	ID        int64          `json:"id" db:"id" form:"id"`                         // id
	PublicID  NullPublicID   `json:"public_id" db:"public_id" form:"public_id"`    // public_id
	UserID    int64          `json:"user_id" db:"user_id" form:"user_id"`          // user_id
	Action    string         `json:"action" db:"action" form:"action"`             // action
	Entity    string         `json:"entity" db:"entity" form:"entity"`             // entity
	EntityID  int64          `json:"entity_id" db:"entity_id" form:"entity_id"`    // entity_id
	Details   sql.NullString `json:"details" db:"details" form:"details"`          // details
	CreatedAt time.Time      `json:"created_at" db:"created_at" form:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AuditLog] exists in the database.
func (al *AuditLog) Exists() bool {
	return al._exists
}

// Deleted returns true when the [AuditLog] has been marked for deletion
// from the database.
func (al *AuditLog) Deleted() bool {
	return al._deleted
}

// Insert inserts the [AuditLog] to the database.
func (al *AuditLog) Insert(ctx context.Context, db DB) error {
	switch {
	case al._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case al._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.audit_logs (` +
		`public_id, user_id, action, entity, entity_id, details, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`
	// run
	logf(sqlstr, al.PublicID, al.UserID, al.Action, al.Entity, al.EntityID, al.Details, al.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, al.PublicID, al.UserID, al.Action, al.Entity, al.EntityID, al.Details, al.CreatedAt).Scan(&al.ID); err != nil {
		return logerror(err)
	}
	// set exists
	al._exists = true
	return nil
}

// Update updates a [AuditLog] in the database.
func (al *AuditLog) Update(ctx context.Context, db DB) error {
	switch {
	case !al._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case al._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.audit_logs SET ` +
		`public_id = $1, user_id = $2, action = $3, entity = $4, entity_id = $5, details = $6, created_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, al.PublicID, al.UserID, al.Action, al.Entity, al.EntityID, al.Details, al.CreatedAt, al.ID)
	if _, err := db.ExecContext(ctx, sqlstr, al.PublicID, al.UserID, al.Action, al.Entity, al.EntityID, al.Details, al.CreatedAt, al.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AuditLog] to the database.
func (al *AuditLog) Save(ctx context.Context, db DB) error {
	if al.Exists() {
		return al.Update(ctx, db)
	}
	return al.Insert(ctx, db)
}

// Upsert performs an upsert for [AuditLog].
func (al *AuditLog) Upsert(ctx context.Context, db DB) error {
	switch {
	case al._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.audit_logs (` +
		`id, public_id, user_id, action, entity, entity_id, details, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, user_id = EXCLUDED.user_id, action = EXCLUDED.action, entity = EXCLUDED.entity, entity_id = EXCLUDED.entity_id, details = EXCLUDED.details, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, al.ID, al.PublicID, al.UserID, al.Action, al.Entity, al.EntityID, al.Details, al.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, al.ID, al.PublicID, al.UserID, al.Action, al.Entity, al.EntityID, al.Details, al.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	al._exists = true
	return nil
}

// Delete deletes the [AuditLog] from the database.
func (al *AuditLog) Delete(ctx context.Context, db DB) error {
	switch {
	case !al._exists: // doesn't exist
		return nil
	case al._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.audit_logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, al.ID)
	if _, err := db.ExecContext(ctx, sqlstr, al.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	al._deleted = true
	return nil
}

// AuditLogByID retrieves a row from 'public.audit_logs' as a [AuditLog].
//
// Generated from index 'audit_logs_pkey'.
func AuditLogByID(ctx context.Context, db DB, id int64) (*AuditLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, action, entity, entity_id, details, created_at ` +
		`FROM public.audit_logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	al := AuditLog{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&al.ID, &al.PublicID, &al.UserID, &al.Action, &al.Entity, &al.EntityID, &al.Details, &al.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &al, nil
}

// AuditLogByPublicID retrieves a row from 'public.audit_logs' as a [AuditLog].
//
// Generated from index 'audit_logs_public_id_key'.
func AuditLogByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*AuditLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, action, entity, entity_id, details, created_at ` +
		`FROM public.audit_logs ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	al := AuditLog{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&al.ID, &al.PublicID, &al.UserID, &al.Action, &al.Entity, &al.EntityID, &al.Details, &al.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &al, nil
}

// AuditLogsByUserID retrieves a row from 'public.audit_logs' as a [AuditLog].
//
// Generated from index 'idx_audit_logs_user_id'.
func AuditLogsByUserID(ctx context.Context, db DB, userID int64) ([]*AuditLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, action, entity, entity_id, details, created_at ` +
		`FROM public.audit_logs ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuditLog
	for rows.Next() {
		al := AuditLog{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&al.ID, &al.PublicID, &al.UserID, &al.Action, &al.Entity, &al.EntityID, &al.Details, &al.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &al)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserByUserID returns the User associated with the [AuditLog]'s (UserID).
//
// Generated from foreign key 'audit_logs_user_id_fkey'.
func (al *AuditLog) UserByUserID(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, al.UserID)
}
