package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// UserRole represents a row from 'public.user_roles'.
type UserRole struct {
	UserID int64 `json:"user_id" db:"user_id" form:"user_id"` // user_id
	RoleID int64 `json:"role_id" db:"role_id" form:"role_id"` // role_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [UserRole] exists in the database.
func (ur *UserRole) Exists() bool {
	return ur._exists
}

// Deleted returns true when the [UserRole] has been marked for deletion
// from the database.
func (ur *UserRole) Deleted() bool {
	return ur._deleted
}

// Insert inserts the [UserRole] to the database.
func (ur *UserRole) Insert(ctx context.Context, db DB) error {
	switch {
	case ur._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ur._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.user_roles (` +
		`user_id, role_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, ur.UserID, ur.RoleID)
	if _, err := db.ExecContext(ctx, sqlstr, ur.UserID, ur.RoleID); err != nil {
		return logerror(err)
	}
	// set exists
	ur._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [UserRole] from the database.
func (ur *UserRole) Delete(ctx context.Context, db DB) error {
	switch {
	case !ur._exists: // doesn't exist
		return nil
	case ur._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.user_roles ` +
		`WHERE user_id = $1 AND role_id = $2`
	// run
	logf(sqlstr, ur.UserID, ur.RoleID)
	if _, err := db.ExecContext(ctx, sqlstr, ur.UserID, ur.RoleID); err != nil {
		return logerror(err)
	}
	// set deleted
	ur._deleted = true
	return nil
}

// UserRolesByRoleID retrieves a row from 'public.user_roles' as a [UserRole].
//
// Generated from index 'idx_user_roles_role_id'.
func UserRolesByRoleID(ctx context.Context, db DB, roleID int64) ([]*UserRole, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, role_id ` +
		`FROM public.user_roles ` +
		`WHERE role_id = $1`
	// run
	logf(sqlstr, roleID)
	rows, err := db.QueryContext(ctx, sqlstr, roleID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserRole
	for rows.Next() {
		ur := UserRole{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ur.UserID, &ur.RoleID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ur)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserRolesByUserID retrieves a row from 'public.user_roles' as a [UserRole].
//
// Generated from index 'idx_user_roles_user_id'.
func UserRolesByUserID(ctx context.Context, db DB, userID int64) ([]*UserRole, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, role_id ` +
		`FROM public.user_roles ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserRole
	for rows.Next() {
		ur := UserRole{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ur.UserID, &ur.RoleID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ur)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserRoleByUserIDRoleID retrieves a row from 'public.user_roles' as a [UserRole].
//
// Generated from index 'user_roles_pkey'.
func UserRoleByUserIDRoleID(ctx context.Context, db DB, userID, roleID int64) (*UserRole, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, role_id ` +
		`FROM public.user_roles ` +
		`WHERE user_id = $1 AND role_id = $2`
	// run
	logf(sqlstr, userID, roleID)
	ur := UserRole{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, roleID).Scan(&ur.UserID, &ur.RoleID); err != nil {
		return nil, logerror(err)
	}
	return &ur, nil
}

// RoleByRoleID returns the Role associated with the [UserRole]'s (RoleID).
//
// Generated from foreign key 'user_roles_role_id_fkey'.
func (ur *UserRole) RoleByRoleID(ctx context.Context, db DB) (*Role, error) {
	return RoleByID(ctx, db, ur.RoleID)
}

// UserByUserID returns the User associated with the [UserRole]'s (UserID).
//
// Generated from foreign key 'user_roles_user_id_fkey'.
func (ur *UserRole) UserByUserID(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, ur.UserID)
}
