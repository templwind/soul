package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// UserType represents a row from 'public.user_types'.
type UserType struct {
	ID          int64          `json:"id" db:"id" form:"id"`                            // id
	PublicID    sql.NullString `json:"public_id" db:"public_id" form:"public_id"`       // public_id
	TypeName    string         `json:"type_name" db:"type_name" form:"type_name"`       // type_name
	Description string         `json:"description" db:"description" form:"description"` // description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [UserType] exists in the database.
func (ut *UserType) Exists() bool {
	return ut._exists
}

// Deleted returns true when the [UserType] has been marked for deletion
// from the database.
func (ut *UserType) Deleted() bool {
	return ut._deleted
}

// Insert inserts the [UserType] to the database.
func (ut *UserType) Insert(ctx context.Context, db DB) error {
	switch {
	case ut._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ut._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.user_types (` +
		`public_id, type_name, description` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, ut.PublicID, ut.TypeName, ut.Description)
	if err := db.QueryRowContext(ctx, sqlstr, ut.PublicID, ut.TypeName, ut.Description).Scan(&ut.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ut._exists = true
	return nil
}

// Update updates a [UserType] in the database.
func (ut *UserType) Update(ctx context.Context, db DB) error {
	switch {
	case !ut._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ut._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.user_types SET ` +
		`public_id = $1, type_name = $2, description = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, ut.PublicID, ut.TypeName, ut.Description, ut.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ut.PublicID, ut.TypeName, ut.Description, ut.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [UserType] to the database.
func (ut *UserType) Save(ctx context.Context, db DB) error {
	if ut.Exists() {
		return ut.Update(ctx, db)
	}
	return ut.Insert(ctx, db)
}

// Upsert performs an upsert for [UserType].
func (ut *UserType) Upsert(ctx context.Context, db DB) error {
	switch {
	case ut._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.user_types (` +
		`id, public_id, type_name, description` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, type_name = EXCLUDED.type_name, description = EXCLUDED.description `
	// run
	logf(sqlstr, ut.ID, ut.PublicID, ut.TypeName, ut.Description)
	if _, err := db.ExecContext(ctx, sqlstr, ut.ID, ut.PublicID, ut.TypeName, ut.Description); err != nil {
		return logerror(err)
	}
	// set exists
	ut._exists = true
	return nil
}

// Delete deletes the [UserType] from the database.
func (ut *UserType) Delete(ctx context.Context, db DB) error {
	switch {
	case !ut._exists: // doesn't exist
		return nil
	case ut._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.user_types ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ut.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ut.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ut._deleted = true
	return nil
}

// UserTypeByID retrieves a row from 'public.user_types' as a [UserType].
//
// Generated from index 'user_types_pkey'.
func UserTypeByID(ctx context.Context, db DB, id int64) (*UserType, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, type_name, description ` +
		`FROM public.user_types ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ut := UserType{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ut.ID, &ut.PublicID, &ut.TypeName, &ut.Description); err != nil {
		return nil, logerror(err)
	}
	return &ut, nil
}

// UserTypeByPublicID retrieves a row from 'public.user_types' as a [UserType].
//
// Generated from index 'user_types_public_id_key'.
func UserTypeByPublicID(ctx context.Context, db DB, publicID sql.NullString) (*UserType, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, type_name, description ` +
		`FROM public.user_types ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	ut := UserType{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&ut.ID, &ut.PublicID, &ut.TypeName, &ut.Description); err != nil {
		return nil, logerror(err)
	}
	return &ut, nil
}
