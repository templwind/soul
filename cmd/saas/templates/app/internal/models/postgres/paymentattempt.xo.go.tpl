package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// PaymentAttempt represents a row from 'public.payment_attempts'.
type PaymentAttempt struct {
	ID              int64          `json:"id" db:"id" form:"id"`                                           // id
	PublicID        NullPublicID   `json:"public_id" db:"public_id" form:"public_id"`                      // public_id
	InvoiceID       int64          `json:"invoice_id" db:"invoice_id" form:"invoice_id"`                   // invoice_id
	Amount          float64        `json:"amount" db:"amount" form:"amount"`                               // amount
	Status          string         `json:"status" db:"status" form:"status"`                               // status
	GatewayResponse sql.NullString `json:"gateway_response" db:"gateway_response" form:"gateway_response"` // gateway_response
	AttemptDate     time.Time      `json:"attempt_date" db:"attempt_date" form:"attempt_date"`             // attempt_date
	CreatedAt       time.Time      `json:"created_at" db:"created_at" form:"created_at"`                   // created_at
	UpdatedAt       time.Time      `json:"updated_at" db:"updated_at" form:"updated_at"`                   // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PaymentAttempt] exists in the database.
func (pa *PaymentAttempt) Exists() bool {
	return pa._exists
}

// Deleted returns true when the [PaymentAttempt] has been marked for deletion
// from the database.
func (pa *PaymentAttempt) Deleted() bool {
	return pa._deleted
}

// Insert inserts the [PaymentAttempt] to the database.
func (pa *PaymentAttempt) Insert(ctx context.Context, db DB) error {
	switch {
	case pa._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pa._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.payment_attempts (` +
		`public_id, invoice_id, amount, status, gateway_response, attempt_date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`
	// run
	logf(sqlstr, pa.PublicID, pa.InvoiceID, pa.Amount, pa.Status, pa.GatewayResponse, pa.AttemptDate, pa.CreatedAt, pa.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, pa.PublicID, pa.InvoiceID, pa.Amount, pa.Status, pa.GatewayResponse, pa.AttemptDate, pa.CreatedAt, pa.UpdatedAt).Scan(&pa.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pa._exists = true
	return nil
}

// Update updates a [PaymentAttempt] in the database.
func (pa *PaymentAttempt) Update(ctx context.Context, db DB) error {
	switch {
	case !pa._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pa._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.payment_attempts SET ` +
		`public_id = $1, invoice_id = $2, amount = $3, status = $4, gateway_response = $5, attempt_date = $6, created_at = $7, updated_at = $8 ` +
		`WHERE id = $9`
	// run
	logf(sqlstr, pa.PublicID, pa.InvoiceID, pa.Amount, pa.Status, pa.GatewayResponse, pa.AttemptDate, pa.CreatedAt, pa.UpdatedAt, pa.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pa.PublicID, pa.InvoiceID, pa.Amount, pa.Status, pa.GatewayResponse, pa.AttemptDate, pa.CreatedAt, pa.UpdatedAt, pa.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [PaymentAttempt] to the database.
func (pa *PaymentAttempt) Save(ctx context.Context, db DB) error {
	if pa.Exists() {
		return pa.Update(ctx, db)
	}
	return pa.Insert(ctx, db)
}

// Upsert performs an upsert for [PaymentAttempt].
func (pa *PaymentAttempt) Upsert(ctx context.Context, db DB) error {
	switch {
	case pa._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.payment_attempts (` +
		`id, public_id, invoice_id, amount, status, gateway_response, attempt_date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, invoice_id = EXCLUDED.invoice_id, amount = EXCLUDED.amount, status = EXCLUDED.status, gateway_response = EXCLUDED.gateway_response, attempt_date = EXCLUDED.attempt_date, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, pa.ID, pa.PublicID, pa.InvoiceID, pa.Amount, pa.Status, pa.GatewayResponse, pa.AttemptDate, pa.CreatedAt, pa.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, pa.ID, pa.PublicID, pa.InvoiceID, pa.Amount, pa.Status, pa.GatewayResponse, pa.AttemptDate, pa.CreatedAt, pa.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	pa._exists = true
	return nil
}

// Delete deletes the [PaymentAttempt] from the database.
func (pa *PaymentAttempt) Delete(ctx context.Context, db DB) error {
	switch {
	case !pa._exists: // doesn't exist
		return nil
	case pa._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.payment_attempts ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, pa.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pa.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pa._deleted = true
	return nil
}

// PaymentAttemptsByInvoiceID retrieves a row from 'public.payment_attempts' as a [PaymentAttempt].
//
// Generated from index 'idx_payment_attempts_invoice_id'.
func PaymentAttemptsByInvoiceID(ctx context.Context, db DB, invoiceID int64) ([]*PaymentAttempt, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, invoice_id, amount, status, gateway_response, attempt_date, created_at, updated_at ` +
		`FROM public.payment_attempts ` +
		`WHERE invoice_id = $1`
	// run
	logf(sqlstr, invoiceID)
	rows, err := db.QueryContext(ctx, sqlstr, invoiceID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*PaymentAttempt
	for rows.Next() {
		pa := PaymentAttempt{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pa.ID, &pa.PublicID, &pa.InvoiceID, &pa.Amount, &pa.Status, &pa.GatewayResponse, &pa.AttemptDate, &pa.CreatedAt, &pa.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pa)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PaymentAttemptByID retrieves a row from 'public.payment_attempts' as a [PaymentAttempt].
//
// Generated from index 'payment_attempts_pkey'.
func PaymentAttemptByID(ctx context.Context, db DB, id int64) (*PaymentAttempt, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, invoice_id, amount, status, gateway_response, attempt_date, created_at, updated_at ` +
		`FROM public.payment_attempts ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	pa := PaymentAttempt{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pa.ID, &pa.PublicID, &pa.InvoiceID, &pa.Amount, &pa.Status, &pa.GatewayResponse, &pa.AttemptDate, &pa.CreatedAt, &pa.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &pa, nil
}

// PaymentAttemptByPublicID retrieves a row from 'public.payment_attempts' as a [PaymentAttempt].
//
// Generated from index 'payment_attempts_public_id_key'.
func PaymentAttemptByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*PaymentAttempt, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, invoice_id, amount, status, gateway_response, attempt_date, created_at, updated_at ` +
		`FROM public.payment_attempts ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	pa := PaymentAttempt{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&pa.ID, &pa.PublicID, &pa.InvoiceID, &pa.Amount, &pa.Status, &pa.GatewayResponse, &pa.AttemptDate, &pa.CreatedAt, &pa.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &pa, nil
}

// InvoiceByInvoiceID returns the Invoice associated with the [PaymentAttempt]'s (InvoiceID).
//
// Generated from foreign key 'payment_attempts_invoice_id_fkey'.
func (pa *PaymentAttempt) InvoiceByInvoiceID(ctx context.Context, db DB) (*Invoice, error) {
	return InvoiceByID(ctx, db, pa.InvoiceID)
}
