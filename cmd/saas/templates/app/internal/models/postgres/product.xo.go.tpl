package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Product represents a row from 'public.products'.
type Product struct {
	ID             int64          `json:"id" db:"id" form:"id"`                                        // id
	PublicID       NullPublicID   `json:"public_id" db:"public_id" form:"public_id"`                   // public_id
	Name           string         `json:"name" db:"name" form:"name"`                                  // name
	Description    sql.NullString `json:"description" db:"description" form:"description"`             // description
	Price          float64        `json:"price" db:"price" form:"price"`                               // price
	IsSubscription bool           `json:"is_subscription" db:"is_subscription" form:"is_subscription"` // is_subscription
	CreatedAt      time.Time      `json:"created_at" db:"created_at" form:"created_at"`                // created_at
	UpdatedAt      time.Time      `json:"updated_at" db:"updated_at" form:"updated_at"`                // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Product] exists in the database.
func (p *Product) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Product] has been marked for deletion
// from the database.
func (p *Product) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Product] to the database.
func (p *Product) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.products (` +
		`public_id, name, description, price, is_subscription, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.PublicID, p.Name, p.Description, p.Price, p.IsSubscription, p.CreatedAt, p.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, p.PublicID, p.Name, p.Description, p.Price, p.IsSubscription, p.CreatedAt, p.UpdatedAt).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Product] in the database.
func (p *Product) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.products SET ` +
		`public_id = $1, name = $2, description = $3, price = $4, is_subscription = $5, created_at = $6, updated_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, p.PublicID, p.Name, p.Description, p.Price, p.IsSubscription, p.CreatedAt, p.UpdatedAt, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.PublicID, p.Name, p.Description, p.Price, p.IsSubscription, p.CreatedAt, p.UpdatedAt, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Product] to the database.
func (p *Product) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Product].
func (p *Product) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.products (` +
		`id, public_id, name, description, price, is_subscription, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, name = EXCLUDED.name, description = EXCLUDED.description, price = EXCLUDED.price, is_subscription = EXCLUDED.is_subscription, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, p.ID, p.PublicID, p.Name, p.Description, p.Price, p.IsSubscription, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.PublicID, p.Name, p.Description, p.Price, p.IsSubscription, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Product] from the database.
func (p *Product) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.products ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProductByID retrieves a row from 'public.products' as a [Product].
//
// Generated from index 'products_pkey'.
func ProductByID(ctx context.Context, db DB, id int64) (*Product, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, name, description, price, is_subscription, created_at, updated_at ` +
		`FROM public.products ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Product{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.PublicID, &p.Name, &p.Description, &p.Price, &p.IsSubscription, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// ProductByPublicID retrieves a row from 'public.products' as a [Product].
//
// Generated from index 'products_public_id_key'.
func ProductByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*Product, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, name, description, price, is_subscription, created_at, updated_at ` +
		`FROM public.products ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	p := Product{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&p.ID, &p.PublicID, &p.Name, &p.Description, &p.Price, &p.IsSubscription, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
