package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Notification represents a row from 'public.notifications'.
type Notification struct {
	ID        int64        `json:"id" db:"id" form:"id"`                         // id
	PublicID  NullPublicID `json:"public_id" db:"public_id" form:"public_id"`    // public_id
	UserID    int64        `json:"user_id" db:"user_id" form:"user_id"`          // user_id
	Message   string       `json:"message" db:"message" form:"message"`          // message
	Read      bool         `json:"read" db:"read" form:"read"`                   // read
	CreatedAt time.Time    `json:"created_at" db:"created_at" form:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Notification] exists in the database.
func (n *Notification) Exists() bool {
	return n._exists
}

// Deleted returns true when the [Notification] has been marked for deletion
// from the database.
func (n *Notification) Deleted() bool {
	return n._deleted
}

// Insert inserts the [Notification] to the database.
func (n *Notification) Insert(ctx context.Context, db DB) error {
	switch {
	case n._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case n._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.notifications (` +
		`public_id, user_id, message, read, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, n.PublicID, n.UserID, n.Message, n.Read, n.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, n.PublicID, n.UserID, n.Message, n.Read, n.CreatedAt).Scan(&n.ID); err != nil {
		return logerror(err)
	}
	// set exists
	n._exists = true
	return nil
}

// Update updates a [Notification] in the database.
func (n *Notification) Update(ctx context.Context, db DB) error {
	switch {
	case !n._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case n._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.notifications SET ` +
		`public_id = $1, user_id = $2, message = $3, read = $4, created_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, n.PublicID, n.UserID, n.Message, n.Read, n.CreatedAt, n.ID)
	if _, err := db.ExecContext(ctx, sqlstr, n.PublicID, n.UserID, n.Message, n.Read, n.CreatedAt, n.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Notification] to the database.
func (n *Notification) Save(ctx context.Context, db DB) error {
	if n.Exists() {
		return n.Update(ctx, db)
	}
	return n.Insert(ctx, db)
}

// Upsert performs an upsert for [Notification].
func (n *Notification) Upsert(ctx context.Context, db DB) error {
	switch {
	case n._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.notifications (` +
		`id, public_id, user_id, message, read, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`public_id = EXCLUDED.public_id, user_id = EXCLUDED.user_id, message = EXCLUDED.message, read = EXCLUDED.read, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, n.ID, n.PublicID, n.UserID, n.Message, n.Read, n.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, n.ID, n.PublicID, n.UserID, n.Message, n.Read, n.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	n._exists = true
	return nil
}

// Delete deletes the [Notification] from the database.
func (n *Notification) Delete(ctx context.Context, db DB) error {
	switch {
	case !n._exists: // doesn't exist
		return nil
	case n._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.notifications ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, n.ID)
	if _, err := db.ExecContext(ctx, sqlstr, n.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	n._deleted = true
	return nil
}

// NotificationsByUserID retrieves a row from 'public.notifications' as a [Notification].
//
// Generated from index 'idx_notifications_user_id'.
func NotificationsByUserID(ctx context.Context, db DB, userID int64) ([]*Notification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, message, read, created_at ` +
		`FROM public.notifications ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Notification
	for rows.Next() {
		n := Notification{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&n.ID, &n.PublicID, &n.UserID, &n.Message, &n.Read, &n.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &n)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// NotificationByID retrieves a row from 'public.notifications' as a [Notification].
//
// Generated from index 'notifications_pkey'.
func NotificationByID(ctx context.Context, db DB, id int64) (*Notification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, message, read, created_at ` +
		`FROM public.notifications ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	n := Notification{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&n.ID, &n.PublicID, &n.UserID, &n.Message, &n.Read, &n.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &n, nil
}

// NotificationByPublicID retrieves a row from 'public.notifications' as a [Notification].
//
// Generated from index 'notifications_public_id_key'.
func NotificationByPublicID(ctx context.Context, db DB, publicID NullPublicID) (*Notification, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, public_id, user_id, message, read, created_at ` +
		`FROM public.notifications ` +
		`WHERE public_id = $1`
	// run
	logf(sqlstr, publicID)
	n := Notification{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, publicID).Scan(&n.ID, &n.PublicID, &n.UserID, &n.Message, &n.Read, &n.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &n, nil
}

// UserByUserID returns the User associated with the [Notification]'s (UserID).
//
// Generated from foreign key 'notifications_user_id_fkey'.
func (n *Notification) UserByUserID(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, n.UserID)
}
