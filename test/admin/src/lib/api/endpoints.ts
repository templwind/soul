// Code generated by soul. DO NOT EDIT.

import client from "./api-client";
import * as models from "./models";

// Admin endpoints
export const admin = {
  getListUsersAdmin: (): Promise<models.User> =>
    client.get<models.User>(`/api/admin/users`),
  getGetUserDetailsAdmin: (userID: string): Promise<models.AdminUserResponse> =>
    client.get<models.AdminUserResponse>(`/api/admin/users/${userID}`),
  getListUserCommunications: (userID: string): Promise<models.AdminUserCommunicationsResponse> =>
    client.get<models.AdminUserCommunicationsResponse>(`/api/admin/users/${userID}/communications`),
  postSendCommunication: (userID: string): Promise<models.NotificationResponse> =>
    client.post<models.NotificationResponse>(`/api/admin/users/${userID}/communications`),
  getGetDashboardMetrics: (): Promise<models.DashboardMetrics> =>
    client.get<models.DashboardMetrics>(`/api/admin/dashboard/metrics`),
};

// Auth endpoints
export const auth = {
  postRegisterUser: (data: models.RegisterRequest): Promise<models.Response> =>
    client.post<models.Response>(`/api/register`, data),
  postLoginUser: (data: models.LoginRequest): Promise<models.Response> =>
    client.post<models.Response>(`/api/login`, data),
  postForgotPassword: (): Promise<models.Response> =>
    client.post<models.Response>(`/api/forgot-password`),
  postResetPassword: (): Promise<models.Response> =>
    client.post<models.Response>(`/api/reset-password`),
  postRequestLoginCode: (data: models.LoginCodeRequest): Promise<models.Response> =>
    client.post<models.Response>(`/api/login/code`, data),
  postVerifyLoginCode: (data: models.VerifyCodeRequest): Promise<models.Response> =>
    client.post<models.Response>(`/api/login/verify`, data),
  getGoogleLogin: (): Promise<models.Response> =>
    client.get<models.Response>(`/api/login/google`),
  getGoogleCallback: (): Promise<models.Response> =>
    client.get<models.Response>(`/api/callback/google`),
};

// Billing endpoints
export const billing = {
  getGetPlans: (): Promise<models.Plan> =>
    client.get<models.Plan>(`/api/plans`),
  postCreateCheckoutSession: (data: models.CheckoutSessionRequest): Promise<models.CheckoutSessionResponse> =>
    client.post<models.CheckoutSessionResponse>(`/api/billing/checkout-session`, data),
  postCreatePortalSession: (): Promise<models.PortalSessionResponse> =>
    client.post<models.PortalSessionResponse>(`/api/billing/portal-session`),
  getGetSubscription: (): Promise<models.Subscription> =>
    client.get<models.Subscription>(`/api/billing/subscription`),
  getGetInvoices: (): Promise<models.InvoiceResponse> =>
    client.get<models.InvoiceResponse>(`/api/billing/invoices`),
  postAddAddon: (addonID: string): Promise<models.AddonResponse> =>
    client.post<models.AddonResponse>(`/api/billing/add-ons/${addonID}`),
  deleteRemoveAddon: (addonID: string): Promise<models.AddonResponse> =>
    client.delete<models.AddonResponse>(`/api/billing/add-ons/${addonID}`),
};

// Blog endpoints
export const blog = {
  getListPublishedPosts: (page: number, perPage: number, sort: string): Promise<models.BlogPost> =>
    client.get<models.BlogPost>(`/api/blog/posts?page=${page}&perPage=${perPage}&sort=${sort}`),
  getGetPostBySlug: (slug: string): Promise<models.BlogPost> =>
    client.get<models.BlogPost>(`/api/blog/posts/${slug}`),
  getListPostsByTag: (tagSlug: string, page: number, perPage: number): Promise<models.BlogPost> =>
    client.get<models.BlogPost>(`/api/blog/tags/${tagSlug}/posts?page=${page}&perPage=${perPage}`),
  getListPostsByCategory: (categorySlug: string, page: number, perPage: number): Promise<models.BlogPost> =>
    client.get<models.BlogPost>(`/api/blog/categories/${categorySlug}/posts?page=${page}&perPage=${perPage}`),
};

// Developer endpoints
export const developer = {
  getGetAPIUsageStats: (): Promise<models.APIUsageStats> =>
    client.get<models.APIUsageStats>(`/api/developer/usage`),
  getGetRateLimitStatus: (): Promise<models.Response> =>
    client.get<models.Response>(`/api/developer/rate-limit`),
};

// Internal endpoints
export const internal = {
  getHealthCheck: (): Promise<models.Response> =>
    client.get<models.Response>(`/internal/health`),
};

// Notifications endpoints
export const notifications = {
  getListNotifications: (): Promise<models.NotificationsResponse> =>
    client.get<models.NotificationsResponse>(`/api/notifications`),
  postMarkAllNotificationsRead: (): Promise<models.NotificationsResponse> =>
    client.post<models.NotificationsResponse>(`/api/notifications/read-all`),
  postMarkNotificationRead: (notificationID: string): Promise<models.NotificationResponse> =>
    client.post<models.NotificationResponse>(`/api/notifications/${notificationID}/read`),
};

// Profile endpoints
export const profile = {
  getGetProfile: (): Promise<models.User> =>
    client.get<models.User>(`/api/profile/""`),
  postRegenerateApiKey: (): Promise<models.Response> =>
    client.post<models.Response>(`/api/profile/regenerate-apikey`),
  postChangeEmail: (): Promise<models.Response> =>
    client.post<models.Response>(`/api/profile/change-email`),
  getGetEmailPreferences: (): Promise<models.EmailPreferences> =>
    client.get<models.EmailPreferences>(`/api/profile/preferences/email`),
  putUpdateEmailPreferences: (data: models.EmailPreferences): Promise<models.Response> =>
    client.put<models.Response>(`/api/profile/preferences/email`, data),
  getGetSecuritySettings: (): Promise<models.SecuritySettings> =>
    client.get<models.SecuritySettings>(`/api/profile/settings/security`),
};

// Teams endpoints
export const teams = {
  postCreateTeam: (data: models.Team): Promise<models.TeamResponse> =>
    client.post<models.TeamResponse>(`/api/teams`, data),
  getListTeams: (): Promise<models.Team> =>
    client.get<models.Team>(`/api/teams`),
  getGetTeamDetails: (teamID: string): Promise<models.TeamResponse> =>
    client.get<models.TeamResponse>(`/api/teams/${teamID}`),
  getListMembers: (teamID: string): Promise<models.TeamMembersResponse> =>
    client.get<models.TeamMembersResponse>(`/api/teams/${teamID}/members`),
  deleteRemoveMember: (teamID: string, memberID: string): Promise<models.TeamMemberResponse> =>
    client.delete<models.TeamMemberResponse>(`/api/teams/${teamID}/members/${memberID}`),
  patchUpdateMemberRole: (teamID: string, memberID: string): Promise<models.TeamMemberResponse> =>
    client.patch<models.TeamMemberResponse>(`/api/teams/${teamID}/members/${memberID}/role`),
  postInviteMember: (teamID: string): Promise<models.InvitationResponse> =>
    client.post<models.InvitationResponse>(`/api/teams/${teamID}/invitations`),
  getListInvitations: (teamID: string): Promise<models.TeamInvitationsResponse> =>
    client.get<models.TeamInvitationsResponse>(`/api/teams/${teamID}/invitations`),
  deleteCancelInvitation: (teamID: string, invitationID: string): Promise<models.InvitationResponse> =>
    client.delete<models.InvitationResponse>(`/api/teams/${teamID}/invitations/${invitationID}`),
  getGetInvitationDetails: (token: string): Promise<models.InvitationResponse> =>
    client.get<models.InvitationResponse>(`/api/teams/invitations/${token}`),
  postAcceptInvitation: (token: string): Promise<models.InvitationResponse> =>
    client.post<models.InvitationResponse>(`/api/teams/invitations/${token}/accept`),
  postDeclineInvitation: (token: string): Promise<models.InvitationResponse> =>
    client.post<models.InvitationResponse>(`/api/teams/invitations/${token}/decline`),
};