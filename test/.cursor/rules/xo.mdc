---
description: Rules for working with github.com/xo/xo database models
globs: ["**/*.xo.go", "**/xo_*.go", "**/internal/models/*.go"]
alwaysApply: true
---
# XO Database Model Guidelines

## Model Generation and Modification

### xo_generated_no_manual_edits
Prevents manual edits to XO-generated models

**File filters:** `internal/models/.*\.xo\.go$|internal/models/xo_.*\.go$`

**Guidelines:**
- These files are auto-generated by XO. Do not edit manually.
- Instead:
  1. Modify your database schema
  2. Run `make xo` from the project root to regenerate models
- If you need to extend functionality:
  - Create extension methods in separate files with appropriate naming
  - Use embedding or composition rather than modifying generated code

**Examples:**
- ❌ Editing internal/models/user.xo.go to add a new field
- ✅ Modify the database schema to add the field, then run 'make xo'
- ❌ Fixed a typo in internal/models/xo_db.go
- ✅ Fix any issues by modifying schema and regenerating

### xo_model_extensions
Enforces proper extension patterns for XO models

**File filters:** `internal/models/(?!.*\.xo\.go$|xo_.*\.go$).*\.go$`

**Guidelines:**
1. **Custom Method Files**:
   Create files named after the model with "_methods.go" suffix:
   ```go
   // user_methods.go
   package models
   
   // UserWithProfile returns a user with their profile data
   func (u *User) WithProfile(ctx context.Context) (*UserWithProfile, error) {
       // Implementation
   }
   ```

2. **Custom Types**:
   Create custom types that embed or compose XO models:
   ```go
   // Custom types with embedded XO models
   type UserWithProfile struct {
       *User
       Profile *Profile
   }
   ```

3. **Custom Queries**:
   Create query functions for operations not covered by basic CRUD:
   ```go
   // FindByUsername queries a user by username
   func (u *User) FindByUsername(ctx context.Context, db XODB, username string) (*User, error) {
       const sqlstr = `SELECT ` + userFields + ` FROM users WHERE username = $1`
       
       q := QueryerContext{
           QueryerContext: db,
       }
       
       return u.query(ctx, q, sqlstr, username)
   }
   ```

## Database Integration

### xo_query_patterns
Enforces proper query patterns with XO models

**File filters:** `internal/(models|logic)/.*\.go$`

**Guidelines:**
1. **Context Usage**:
   Always pass a context:
   ```go
   // Instead of:
   user, err := models.UserByID(db, id)
   
   // Use:
   user, err := models.UserByID(ctx, db, id)
   ```

2. **Error Handling**:
   Handle specific error cases:
   ```go
   user, err := models.UserByID(ctx, db, id)
   if err != nil {
       if errors.Is(err, sql.ErrNoRows) {
           return nil, ErrUserNotFound
       }
       return nil, fmt.Errorf("finding user: %w", err)
   }
   ```

3. **Transaction Usage**:
   Use transactions for multi-operation sequences:
   ```go
   tx, err := db.BeginTx(ctx, nil)
   if err != nil {
       return err
   }
   defer tx.Rollback()
   
   // Use tx for all operations
   user, err := models.UserByID(ctx, tx, id)
   // ...
   
   return tx.Commit()
   ```

4. **Batch Operations**:
   Use batch operations when working with multiple records

### xo_includes_usage
Enforces proper use of XO includes parameter

**File filters:** `Makefile`

**Guidelines:**
1. **Include Only Needed Tables/Schemas**:
   ```
   # In .env file
   XO_INCLUDES="public.users public.profiles public.settings"
   ```

2. **Organize Related Tables**:
   Group related tables together in your includes list for better organization

3. **Use Schema Prefixes**:
   Always include the schema name (e.g., `public.users` not just `users`)

4. **Update .env When Schema Changes**:
   When adding new tables to your database, update XO_INCLUDES

5. **Document Includes**:
   Add comments in your .env file to document what each included table is for

## Field Tags and Model Structure

### xo_field_tag_usage
Enforces proper field tag usage in XO models

**File filters:** `Makefile`

**Guidelines:**
1. **Standard Tags**:
   ```
   --go-field-tag='json:"{{ .SQLName }}" db:"{{ .SQLName }}" form:"{{ .SQLName }}"'
   ```

2. **Tag Purposes**:
   - `json:` - For JSON marshaling/unmarshaling
   - `db:` - For database interactions (required)
   - `form:` - For form binding
   - `validate:` - For validation rules (if needed)

3. **Omitempty Option**:
   Add omitempty for nullable fields:
   ```
   --go-field-tag='json:"{{ .SQLName }},omitempty" db:"{{ .SQLName }}" form:"{{ .SQLName }},omitempty"'
   ```

4. **Custom Tags**:
   Add custom tags for specific frameworks or validation needs

### xo_model_naming_conventions
Enforces proper naming conventions for XO models and related code

**File filters:** `internal/models/.*\.go$`

**Guidelines:**
1. **Model Names**:
   - Use singular nouns for model names (`User` not `Users`)
   - Use CamelCase for type names
   - Use snake_case for database table and column names

2. **Custom Query Methods**:
   - Prefix with Find/Get for retrieval (`FindByEmail`, `GetActive`)
   - Prefix with Update/Insert/Delete for mutations
   - Make purpose clear in name (`FindByUsernameAndStatus`)

3. **Extensions**:
   - Use descriptive suffixes for extended types (`UserWithProfile`)
   - Use verb phrases for method names (`WithProfile`, `AsJSON`)

4. **Variables**:
   - Use consistent variable names across models (`u` for User, etc.)
   - Use db, ctx, tx consistently for common parameters

## Database Schema Design

### xo_database_schema_design
Guides on best practices for database schema design with XO

**File filters:** `internal/models/.*\.go$`

**Guidelines:**
1. **Primary Keys**:
   - Always include an explicit primary key
   - Consider using UUIDs for distributed systems
   - Use auto-incrementing integers for simple schemas

2. **Foreign Keys**:
   - Always define foreign key constraints in the database
   - Name keys consistently: `fk_{table}_{referenced_table}`
   - XO will generate proper relationship methods

3. **Indexes**:
   - Add indexes for frequently queried columns
   - Add unique constraints where appropriate
   - Name indexes consistently: `idx_{table}_{columns}`

4. **Column Naming**:
   - Use snake_case for column names
   - Include table name in join table columns: `user_id` not just `id`
   - Add created_at, updated_at timestamp columns

5. **Enums and Check Constraints**:
   - Use database enums for constrained string values
   - Use check constraints for value validation

## Database Migration Workflow

### xo_migration_management
Enforces best practices for database migration workflow

**File filters:** `Makefile`, `db/migrations/.*\.sql$`

**Guidelines:**
1. **Migration Location**:
   - Place all migrations in the `./db/migrations` directory
   - Follow consistent naming convention for migration files

2. **DSN Management**:
   - Load DSN from environment files (`./.env` or `./env.development`)
   - Use a script to read DSN rather than manual export:
   ```bash
   # In Makefile or shell script
   DSN=$(grep -o 'DATABASE_URL=.*' .env | cut -d '=' -f2)
   ```

3. **Migration Commands**:
   - Use goose for consistent migration management:
   ```bash
   # Up migrations
   goose -dir ./db/migrations postgres "$DSN" up
   
   # Down migrations
   goose -dir ./db/migrations postgres "$DSN" down
   ```

4. **Helper Targets**:
   Add these to your Makefile:
   ```makefile
   .PHONY: migrate-up migrate-down migrate-reset
   
   # Extract DSN from environment file
   DSN := $(shell grep -o 'DATABASE_URL=.*' .env | cut -d '=' -f2 || echo "postgresql://postgres:CHANGE_ME@localhost:5432/goshare?sslmode=disable")
   
   migrate-up:
       @echo "Running migrations up..."
       @cd ./db/migrations && goose postgres "$(DSN)" up
   
   migrate-down:
       @echo "Running migrations down..."
       @cd ./db/migrations && goose postgres "$(DSN)" down
   
   migrate-reset:
       @echo "Resetting database..."
       @cd ./db/migrations && goose postgres "$(DSN)" reset
   ```

5. **Workflow Integration**:
   - Run migrations before generating XO models
   - Add a combined target for migration and model generation:
   ```makefile
   .PHONY: db-refresh
   
   db-refresh: migrate-up xo
       @echo "Database refreshed and models regenerated."
   ```

6. **Migration Best Practices**:
   - Keep migrations idempotent when possible
   - Include both up and down migrations
   - Document complex migrations with comments
   - Test migrations in development before applying to production

## XO Command and Workflow

### xo_workflow_best_practices
Enforces best practices for XO code generation workflow

**File filters:** `Makefile`

**Guidelines:**
1. **Database Migration**:
   - Use migrations to update your database schema
   - Regenerate models after each schema change
   - Keep XO_INCLUDES in sync with schema changes

2. **Version Control**:
   - Commit generated models to version control
   - Review diffs carefully after regeneration
   - Document schema changes alongside model changes

3. **Command Options**:
   - Use `--go-esc=all` to escape SQL identifiers
   - Use `-k field` to specify key type
   - Use `--include` to limit generation to specific tables

4. **Command Arguments**:
   - Use standard connection string formats
   - Include SSL mode for PostgreSQL
   - Document connection parameters in comments

5. **Automation**:
   - Run model generation in CI/CD pipelines
   - Validate models after generation
   - Provide team documentation for XO workflow

### xo_model_usage_in_logic
Enforces proper usage of XO models in application logic

**File filters:** `internal/logic/.*\.go$`

**Guidelines:**
1. **Dependency Injection**:
   - Pass database connections through service context
   - Use interfaces instead of concrete types when possible

2. **Struct Initialization**:
   - Use field names when initializing model structs
   - Set all required fields, use zero values when appropriate
   ```go
   user := &models.User{
       Username: req.Username,
       Email:    req.Email,
       Status:   models.UserStatusActive,
   }
   ```

3. **Error Handling**:
   - Check for specific error types when querying
   - Map database errors to appropriate business logic errors
   ```go
   user, err := models.UserByID(ctx, l.svcCtx.DB, id)
   if err != nil {
       if errors.Is(err, sql.ErrNoRows) {
           return nil, ErrUserNotFound
       }
       return nil, fmt.Errorf("database error: %w", err)
   }
   ```

4. **Field Manipulation**:
   - Access fields directly for reading
   - Use setters for complex validation if needed
   - Validate input before setting fields

## Performance Considerations

### xo_query_performance
Guides on writing performant queries with XO models

**File filters:** `internal/(models|logic)/.*\.go$`

**Guidelines:**
1. **Select Specific Columns**:
   - Create custom query methods that only select needed columns
   - Use COUNT(*) for checking existence instead of fetching full rows

2. **Pagination**:
   - Always paginate large result sets
   - Implement cursor-based pagination for large tables
   ```go
   func FindUsersPage(ctx context.Context, db XODB, limit, offset int) ([]*User, error) {
       const sqlstr = `SELECT ` + userFields + ` FROM users ORDER BY id LIMIT $1 OFFSET $2`
       return User{}.List(ctx, db, sqlstr, limit, offset)
   }
   ```

3. **Indexing**:
   - Ensure queries use indexed columns in WHERE clauses
   - Use EXPLAIN to verify query plans

4. **Batch Operations**:
   - Use batch inserts for multiple records
   - Implement bulk update methods for common operations

5. **Connection Pooling**:
   - Configure appropriate pool sizes
   - Monitor connection usage

### xo_transaction_usage
Enforces proper transaction usage with XO models

**File filters:** `internal/(models|logic)/.*\.go$`

**Guidelines:**
1. **Always Use Context**:
   ```go
   tx, err := db.BeginTx(ctx, nil)
   if err != nil {
       return err
   }
   ```

2. **Defer Rollback**:
   ```go
   tx, err := db.BeginTx(ctx, nil)
   if err != nil {
       return err
   }
   defer tx.Rollback()
   ```

3. **Pass Transaction to Queries**:
   ```go
   user, err := models.UserByID(ctx, tx, id)
   if err != nil {
       return err
   }
   ```

4. **Error Handling**:
   ```go
   if err := tx.Commit(); err != nil {
       return fmt.Errorf("committing transaction: %w", err)
   }
   ```

5. **Transaction Scope**:
   - Keep transactions as short as possible
   - Don't include external API calls in transactions
   - Group related operations in a single transaction