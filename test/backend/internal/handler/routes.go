// Code generated by soul. DO NOT EDIT.
package handler

import (
	admin "backend/internal/handler/admin"
	auth "backend/internal/handler/auth"
	billing "backend/internal/handler/billing"
	blog "backend/internal/handler/blog"
	developer "backend/internal/handler/developer"
	internal "backend/internal/handler/internal"
	"backend/internal/handler/notfound"
	notifications "backend/internal/handler/notifications"
	profile "backend/internal/handler/profile"
	teams "backend/internal/handler/teams"
	"backend/internal/svc"

	"github.com/golang-jwt/jwt/v5"
	"github.com/labstack/echo-jwt/v4"
	"github.com/labstack/echo/v4"
)

type jwtCustomClaims struct {
	Name  string `json:"name"`
	Admin bool   `json:"admin"`
	jwt.RegisteredClaims
}

func RegisterHandlers(server *echo.Echo, svcCtx *svc.ServiceContext) {
	////////////////////////////////////////////////////////////
	// /api routes
	////////////////////////////////////////////////////////////
	authGroup := server.Group(
		"/api",
	)
	// authGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	authGroup.POST("/register", auth.PostRegisterUserHandler(svcCtx, "/register"))
	authGroup.POST("/login", auth.PostLoginUserHandler(svcCtx, "/login"))
	authGroup.POST("/forgot-password", auth.PostForgotPasswordHandler(svcCtx, "/forgot-password"))
	authGroup.POST("/reset-password", auth.PostResetPasswordHandler(svcCtx, "/reset-password"))
	authGroup.POST("/login/code", auth.PostRequestLoginCodeHandler(svcCtx, "/login/code"))
	authGroup.POST("/login/verify", auth.PostVerifyLoginCodeHandler(svcCtx, "/login/verify"))
	authGroup.GET("/login/google", auth.GetGoogleLoginHandler(svcCtx, "/login/google"))
	authGroup.GET("/callback/google", auth.GetGoogleCallbackHandler(svcCtx, "/callback/google"))

	////////////////////////////////////////////////////////////
	// /api/blog routes
	////////////////////////////////////////////////////////////
	blogGroup := server.Group(
		"/api/blog",
	)
	// blogGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	blogGroup.GET("/posts", blog.GetListPublishedPostsHandler(svcCtx, "/posts"))
	blogGroup.GET("/posts/:slug", blog.GetPostBySlugHandler(svcCtx, "/posts/:slug"))
	blogGroup.GET("/tags/:tagSlug/posts", blog.GetListPostsByTagHandler(svcCtx, "/tags/:tagSlug/posts"))
	blogGroup.GET("/categories/:categorySlug/posts", blog.GetListPostsByCategoryHandler(svcCtx, "/categories/:categorySlug/posts"))

	////////////////////////////////////////////////////////////
	// /api/profile routes
	////////////////////////////////////////////////////////////
	profileGroup := server.Group(
		"/api/profile",
		[]echo.MiddlewareFunc{
			echojwt.WithConfig(echojwt.Config{
				NewClaimsFunc: func(c echo.Context) jwt.Claims { return new(jwtCustomClaims) },
				SigningKey:    []byte(svcCtx.Config.Auth.AccessSecret),
				TokenLookup:   "cookie:auth",
				ErrorHandler: func(c echo.Context, err error) error {
					c.Redirect(302, "/auth/login")
					return nil
				},
			}),
		}...,
	)
	// profileGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	profileGroup.GET("", profile.GetProfileHandler(svcCtx, ""))
	profileGroup.POST("/regenerate-apikey", profile.PostRegenerateApiKeyHandler(svcCtx, "/regenerate-apikey"))
	profileGroup.POST("/change-email", profile.PostChangeEmailHandler(svcCtx, "/change-email"))
	profileGroup.GET("/preferences/email", profile.GetEmailPreferencesHandler(svcCtx, "/preferences/email"))
	profileGroup.PUT("/preferences/email", profile.PutUpdateEmailPreferencesHandler(svcCtx, "/preferences/email"))
	profileGroup.GET("/settings/security", profile.GetSecuritySettingsHandler(svcCtx, "/settings/security"))

	////////////////////////////////////////////////////////////
	// /api routes
	////////////////////////////////////////////////////////////
	billingGroup := server.Group(
		"/api",
		[]echo.MiddlewareFunc{
			echojwt.WithConfig(echojwt.Config{
				NewClaimsFunc: func(c echo.Context) jwt.Claims { return new(jwtCustomClaims) },
				SigningKey:    []byte(svcCtx.Config.Auth.AccessSecret),
				TokenLookup:   "cookie:auth",
				ErrorHandler: func(c echo.Context, err error) error {
					c.Redirect(302, "/auth/login")
					return nil
				},
			}),
		}...,
	)
	// billingGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	billingGroup.GET("/plans", billing.GetPlansHandler(svcCtx, "/plans"))
	billingGroup.POST("/billing/checkout-session", billing.PostCreateCheckoutSessionHandler(svcCtx, "/billing/checkout-session"))
	billingGroup.POST("/billing/portal-session", billing.PostCreatePortalSessionHandler(svcCtx, "/billing/portal-session"))
	billingGroup.GET("/billing/subscription", billing.GetSubscriptionHandler(svcCtx, "/billing/subscription"))
	billingGroup.GET("/billing/invoices", billing.GetInvoicesHandler(svcCtx, "/billing/invoices"))
	billingGroup.POST("/billing/add-ons/:addonId", billing.PostAddAddonHandler(svcCtx, "/billing/add-ons/:addonId"))
	billingGroup.DELETE("/billing/add-ons/:addonId", billing.DeleteRemoveAddonHandler(svcCtx, "/billing/add-ons/:addonId"))

	////////////////////////////////////////////////////////////
	// /api/teams routes
	////////////////////////////////////////////////////////////
	teamsGroup := server.Group(
		"/api/teams",
		[]echo.MiddlewareFunc{
			echojwt.WithConfig(echojwt.Config{
				NewClaimsFunc: func(c echo.Context) jwt.Claims { return new(jwtCustomClaims) },
				SigningKey:    []byte(svcCtx.Config.Auth.AccessSecret),
				TokenLookup:   "cookie:auth",
				ErrorHandler: func(c echo.Context, err error) error {
					c.Redirect(302, "/auth/login")
					return nil
				},
			}),
		}...,
	)
	// teamsGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	teamsGroup.POST("", teams.PostCreateTeamHandler(svcCtx, ""))
	teamsGroup.GET("", teams.GetListTeamsHandler(svcCtx, ""))
	teamsGroup.GET("/:teamId", teams.GetTeamDetailsHandler(svcCtx, "/:teamId"))
	teamsGroup.GET("/:teamId/members", teams.GetListMembersHandler(svcCtx, "/:teamId/members"))
	teamsGroup.DELETE("/:teamId/members/:memberId", teams.DeleteRemoveMemberHandler(svcCtx, "/:teamId/members/:memberId"))
	teamsGroup.PATCH("/:teamId/members/:memberId/role", teams.PatchUpdateMemberRoleHandler(svcCtx, "/:teamId/members/:memberId/role"))
	teamsGroup.POST("/:teamId/invitations", teams.PostInviteMemberHandler(svcCtx, "/:teamId/invitations"))
	teamsGroup.GET("/:teamId/invitations", teams.GetListInvitationsHandler(svcCtx, "/:teamId/invitations"))
	teamsGroup.DELETE("/:teamId/invitations/:invitationId", teams.DeleteCancelInvitationHandler(svcCtx, "/:teamId/invitations/:invitationId"))
	teamsGroup.GET("/invitations/:token", teams.GetInvitationDetailsHandler(svcCtx, "/invitations/:token"))
	teamsGroup.POST("/invitations/:token/accept", teams.PostAcceptInvitationHandler(svcCtx, "/invitations/:token/accept"))
	teamsGroup.POST("/invitations/:token/decline", teams.PostDeclineInvitationHandler(svcCtx, "/invitations/:token/decline"))

	////////////////////////////////////////////////////////////
	// /api/developer routes
	////////////////////////////////////////////////////////////
	developerGroup := server.Group(
		"/api/developer",
		[]echo.MiddlewareFunc{
			echojwt.WithConfig(echojwt.Config{
				NewClaimsFunc: func(c echo.Context) jwt.Claims { return new(jwtCustomClaims) },
				SigningKey:    []byte(svcCtx.Config.Auth.AccessSecret),
				TokenLookup:   "cookie:auth",
				ErrorHandler: func(c echo.Context, err error) error {
					c.Redirect(302, "/auth/login")
					return nil
				},
			}),
		}...,
	)
	// developerGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	developerGroup.GET("/usage", developer.GetAPIUsageStatsHandler(svcCtx, "/usage"))
	developerGroup.GET("/rate-limit", developer.GetRateLimitStatusHandler(svcCtx, "/rate-limit"))

	////////////////////////////////////////////////////////////
	// /api/notifications routes
	////////////////////////////////////////////////////////////
	notificationsGroup := server.Group(
		"/api/notifications",
		[]echo.MiddlewareFunc{
			echojwt.WithConfig(echojwt.Config{
				NewClaimsFunc: func(c echo.Context) jwt.Claims { return new(jwtCustomClaims) },
				SigningKey:    []byte(svcCtx.Config.Auth.AccessSecret),
				TokenLookup:   "cookie:auth",
				ErrorHandler: func(c echo.Context, err error) error {
					c.Redirect(302, "/auth/login")
					return nil
				},
			}),
		}...,
	)
	// notificationsGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	notificationsGroup.GET("", notifications.GetListNotificationsHandler(svcCtx, ""))
	notificationsGroup.POST("/read-all", notifications.PostMarkAllNotificationsReadHandler(svcCtx, "/read-all"))
	notificationsGroup.POST("/:notificationId/read", notifications.PostMarkNotificationReadHandler(svcCtx, "/:notificationId/read"))

	////////////////////////////////////////////////////////////
	// /api/admin routes
	////////////////////////////////////////////////////////////
	adminGroup := server.Group(
		"/api/admin",
		[]echo.MiddlewareFunc{
			echojwt.WithConfig(echojwt.Config{
				NewClaimsFunc: func(c echo.Context) jwt.Claims { return new(jwtCustomClaims) },
				SigningKey:    []byte(svcCtx.Config.Auth.AccessSecret),
				TokenLookup:   "cookie:auth",
				ErrorHandler: func(c echo.Context, err error) error {
					c.Redirect(302, "/auth/login")
					return nil
				},
			}),
		}...,
	)
	// adminGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	adminGroup.GET("/users", admin.GetListUsersAdminHandler(svcCtx, "/users"))
	adminGroup.GET("/users/:userId", admin.GetUserDetailsAdminHandler(svcCtx, "/users/:userId"))
	adminGroup.GET("/users/:userId/communications", admin.GetListUserCommunicationsHandler(svcCtx, "/users/:userId/communications"))
	adminGroup.POST("/users/:userId/communications", admin.PostSendCommunicationHandler(svcCtx, "/users/:userId/communications"))
	adminGroup.GET("/dashboard/metrics", admin.GetDashboardMetricsHandler(svcCtx, "/dashboard/metrics"))

	////////////////////////////////////////////////////////////
	// /internal routes
	////////////////////////////////////////////////////////////
	internalGroup := server.Group(
		"/internal",
	)
	// internalGroup.Use(middleware.RemoveTrailingSlashWithConfig(middleware.TrailingSlashConfig{
	// 	RedirectCode: http.StatusMovedPermanently,
	// }))

	internalGroup.GET("/health", internal.GetHealthCheckHandler(svcCtx, "/health"))

	////////////////////////////////////////////////////////////
	// 404 / Catchall handler
	////////////////////////////////////////////////////////////
	server.Any("/*", notfound.NotFoundHandler(svcCtx))
}
